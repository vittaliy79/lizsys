// src/pages/ContractsPage.jsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

export default function ContractsPage() {
    const [contracts, setContracts] = useState([]);
    const [search, setSearch] = useState('');
    const [modalOpen, setModalOpen] = useState(false);
    const [form, setForm] = useState({
        title: '',
        number: '',
        amount: '',
        startDate: '',
        endDate: '',
        type: '', // –¥–æ–±–∞–≤–ª–µ–Ω–æ
        downPayment: '',
        interestRate: '',
        termMonths: '',
    });

    const [editingContract, setEditingContract] = useState(null);
    const isEditing = Boolean(editingContract);

    const [sortBy, setSortBy] = useState('id');
    const [sortAsc, setSortAsc] = useState(false);

    useEffect(() => {
        fetchContracts();
    }, []);

    async function fetchContracts() {
        try {
            const res = await axios.get('/api/contracts');
            console.log('Contracts response:', res.data); // <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ
            if (Array.isArray(res.data)) {
                setContracts(res.data);
            } else {
                console.error('–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤, –Ω–æ –ø–æ–ª—É—á–µ–Ω:', res.data);
                setContracts([]); // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            }
        } catch (error) {
            console.error('Failed to fetch contracts', error);
            setContracts([]);
        }
    }

    function filteredContracts() {
        if (!Array.isArray(contracts)) return [];
        let result = [...contracts];

        if (search) {
            result = result.filter(
                c =>
                    c.title?.toLowerCase().includes(search.toLowerCase()) ||
                    c.number?.toLowerCase().includes(search.toLowerCase())
            );
        }

        result.sort((a, b) => {
            if (a[sortBy] < b[sortBy]) return sortAsc ? -1 : 1;
            if (a[sortBy] > b[sortBy]) return sortAsc ? 1 : -1;
            return 0;
        });

        return result;
    }

    function handleChange(e) {
        setForm(prev => ({...prev, [e.target.name]: e.target.value}));
    }

    function validateForm() {
        if (!form.title.trim()) return '–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
        if (!form.number.trim()) return '–ù–æ–º–µ—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
        if (!form.amount || isNaN(form.amount)) return '–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º';
        if (!form.startDate || !form.endDate) return '–î–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã';
        if (new Date(form.endDate) < new Date(form.startDate)) return '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞';
        if (!form.downPayment || isNaN(form.downPayment)) return '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º';
        if (!form.interestRate || isNaN(form.interestRate)) return '–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º';
        if (!form.termMonths || isNaN(form.termMonths)) return '–°—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º';
        return null;
    }

    async function submitContract(e) {
        e.preventDefault();
        const validationError = validateForm();
        if (validationError) {
            alert(`–û—à–∏–±–∫–∞: ${validationError}`);
            return;
        }

        const confirmed = confirm(isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç?');
        if (!confirmed) return;

        try {
            const principal = parseFloat(form.amount) - parseFloat(form.downPayment);
            const monthlyRate = parseFloat(form.interestRate) / 100 / 12;
            const months = parseInt(form.termMonths);
            const monthlyPayment = monthlyRate === 0
                ? principal / months
                : (principal * monthlyRate) / (1 - Math.pow(1 + monthlyRate, -months));

            const formData = {...form, monthlyPayment: monthlyPayment.toFixed(2)};

            if (isEditing) {
                await axios.put(`/api/contracts/${editingContract.id}`, formData);
            } else {
                await axios.post('/api/contracts', formData);
            }
            setModalOpen(false);
            setEditingContract(null);
            setForm({
                title: '',
                number: '',
                amount: '',
                startDate: '',
                endDate: '',
                type: '',
                downPayment: '',
                interestRate: '',
                termMonths: '',
            });
            fetchContracts();
        } catch (error) {
            console.error('Failed to save contract', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
        }
    }

    async function handleDeleteContract(id) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç?')) return;
        try {
            await axios.delete(`/api/contracts/${id}`);
            fetchContracts();
        } catch (error) {
            console.error('Failed to delete contract', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞');
        }
    }

    async function handleExtendContract(id) {
        if (!confirm('–ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞?')) return;
        try {
            await axios.post(`/api/contracts/${id}/extend`);
            fetchContracts();
            alert('–ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø—Ä–æ–¥–ª—ë–Ω.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç');
        }
    }

    async function handleTransferOwnership(id) {
        if (!confirm('–ü–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É?')) return;
        try {
            await axios.post(`/api/contracts/${id}/transfer-ownership`);
            fetchContracts();
            alert('–ü—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –ø—Ä–∞–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø—Ä–∞–≤–∞');
        }
    }

    function openEditModal(contract) {
        setEditingContract(contract);
        setForm({
            title: contract.title,
            number: contract.number,
            amount: contract.amount,
            startDate: contract.startDate,
            endDate: contract.endDate,
            type: contract.type || '',
            downPayment: contract.downPayment || '',
            interestRate: contract.interestRate || '',
            termMonths: contract.termMonths || '',
            monthlyPayment: contract.monthlyPayment || '',
        });
        setModalOpen(true);
    }

    function handleSort(column) {
        if (sortBy === column) {
            setSortAsc(!sortAsc);
        } else {
            setSortBy(column);
            setSortAsc(true);
        }
    }

    return (
        <div className="p-4">
            <div className="flex justify-between mb-4">
                <input
                    type="text"
                    placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –Ω–æ–º–µ—Ä—É"
                    value={search}
                    onChange={e => setSearch(e.target.value)}
                    className="border px-2 py-1 rounded w-64"
                />
                <div className="flex items-center">
                    <button
                        onClick={() => setModalOpen(true)}
                        className="bg-blue-600 text-white px-4 py-2 rounded"
                    >
                        –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç
                    </button>
                    <button
                        onClick={() => alert('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞')}
                        className="bg-green-600 text-white px-4 py-2 rounded ml-2"
                    >
                        üìé –î–æ–∫—É–º–µ–Ω—Ç—ã
                    </button>
                </div>
            </div>
            <table className="w-full border-collapse border border-gray-300">
                <thead>
                <tr className="bg-gray-100">
                    <th className="border border-gray-300 p-2 cursor-pointer" onClick={() => handleSort('id')}>ID</th>
                    <th className="border border-gray-300 p-2 cursor-pointer" onClick={() => handleSort('title')}>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                    <th className="border border-gray-300 p-2 cursor-pointer" onClick={() => handleSort('number')}>–ù–æ–º–µ—Ä</th>
                    <th className="border border-gray-300 p-2 cursor-pointer" onClick={() => handleSort('amount')}>–°—É–º–º–∞</th>
                    <th className="border border-gray-300 p-2 cursor-pointer" onClick={() => handleSort('startDate')}>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</th>
                    <th className="border border-gray-300 p-2 cursor-pointer" onClick={() => handleSort('endDate')}>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</th>
                    <th className="border border-gray-300 p-2">–î–µ–π—Å—Ç–≤–∏—è</th>
                </tr>
                </thead>
                <tbody>
                {filteredContracts().map(contract => (
                    <tr key={contract.id} className="hover:bg-gray-50">
                        <td className="border border-gray-300 p-2">{contract.id}</td>
                        <td className="border border-gray-300 p-2">{contract.title}</td>
                        <td className="border border-gray-300 p-2">{contract.number}</td>
                        <td className="border border-gray-300 p-2">{contract.amount}</td>
                        <td className="border border-gray-300 p-2">{contract.startDate}</td>
                        <td className="border border-gray-300 p-2">{contract.endDate}</td>
                        <td className="border border-gray-300 p-2 text-right space-x-2">
                            <button
                                onClick={() => openEditModal(contract)}
                                className="text-blue-600 hover:underline text-sm"
                            >
                                ‚úèÔ∏è
                            </button>
                            <button
                                onClick={() => handleDeleteContract(contract.id)}
                                className="text-red-600 hover:underline text-sm"
                            >
                                üóëÔ∏è
                            </button>
                            <button
                                onClick={() => alert('–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ')}
                                className="text-gray-600 hover:underline text-sm"
                            >
                                üóÑÔ∏è
                            </button>
                            <button
                                onClick={() => handleExtendContract(contract.id)}
                                className="text-yellow-600 hover:underline text-sm"
                            >
                                ‚è≥
                            </button>
                            <button
                                onClick={() => handleTransferOwnership(contract.id)}
                                className="text-green-600 hover:underline text-sm"
                            >
                                ‚úÖ
                            </button>
                        </td>
                    </tr>
                ))}
                </tbody>
            </table>

            {modalOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded shadow-lg w-96">
                        <h2 className="text-xl mb-4">
                            {isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç'}
                        </h2>
                        <form onSubmit={submitContract} className="space-y-3">
                            <div>
                                <label className="block mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                                <input
                                    type="text"
                                    name="title"
                                    value={form.title}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–ù–æ–º–µ—Ä</label>
                                <input
                                    type="text"
                                    name="number"
                                    value={form.number}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–¢–∏–ø –¥–æ–≥–æ–≤–æ—Ä–∞</label>
                                <select
                                    name="type"
                                    value={form.type}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                >
                                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
                                    <option value="vehicle">–ê–≤—Ç–æ–º–æ–±–∏–ª—å</option>
                                    <option value="equipment">–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</option>
                                </select>
                            </div>
                            <div>
                                <label className="block mb-1">–°—É–º–º–∞</label>
                                <input
                                    type="number"
                                    name="amount"
                                    value={form.amount}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å</label>
                                <input
                                    type="number"
                                    name="downPayment"
                                    value={form.downPayment}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (%)</label>
                                <input
                                    type="number"
                                    name="interestRate"
                                    value={form.interestRate}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–°—Ä–æ–∫ (–≤ –º–µ—Å—è—Ü–∞—Ö)</label>
                                <input
                                    type="number"
                                    name="termMonths"
                                    value={form.termMonths}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
                                <input
                                    type="date"
                                    name="startDate"
                                    value={form.startDate}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
                                <input
                                    type="date"
                                    name="endDate"
                                    value={form.endDate}
                                    onChange={handleChange}
                                    required
                                    className="w-full border px-2 py-1 rounded"
                                />
                            </div>
                            <div>
                                <label className="block mb-1">–î–æ–∫—É–º–µ–Ω—Ç—ã</label>
                                <input
                                    type="file"
                                    multiple
                                    className="w-full border px-2 py-1 rounded"
                                    disabled
                                />
                                <p className="text-sm text-gray-500 mt-1">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞</p>
                            </div>
                            <div className="flex justify-end space-x-2">
                                <button
                                    type="button"
                                    onClick={() => {
                                        setModalOpen(false);
                                        setEditingContract(null);
                                    }}
                                    className="px-4 py-2 border rounded"
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </button>
                                <button
                                    type="submit"
                                    className="bg-blue-600 text-white px-4 py-2 rounded"
                                >
                                    {isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            )}
        </div>
    );
}